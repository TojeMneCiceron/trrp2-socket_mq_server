// generated by tscfg
// source: src/main/resources/application.conf.template

package ru.psu.movs.trrp.socketmq;

import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;

import java.io.File;

public class AppConfig {
    public final AppConfig.CacheServer cacheServer;
    public final AppConfig.ConsoleRssServer consoleRssServer;
    public final AppConfig.MessageQueueServer messageQueueServer;

    public AppConfig(com.typesafe.config.Config c) {
        final $TsCfgValidator $tsCfgValidator = new $TsCfgValidator();
        final java.lang.String parentPath = "";
        this.cacheServer =
                c.hasPathOrNull("cacheServer")
                        ? new AppConfig.CacheServer(
                        c.getConfig("cacheServer"), parentPath + "cacheServer.", $tsCfgValidator)
                        : new AppConfig.CacheServer(
                        com.typesafe.config.ConfigFactory.parseString("cacheServer{}"),
                        parentPath + "cacheServer.",
                        $tsCfgValidator);
        this.consoleRssServer =
                c.hasPathOrNull("consoleRssServer")
                        ? new AppConfig.ConsoleRssServer(
                        c.getConfig("consoleRssServer"), parentPath + "consoleRssServer.", $tsCfgValidator)
                        : new AppConfig.ConsoleRssServer(
                        com.typesafe.config.ConfigFactory.parseString("consoleRssServer{}"),
                        parentPath + "consoleRssServer.",
                        $tsCfgValidator);
        this.messageQueueServer =
                c.hasPathOrNull("messageQueueServer")
                        ? new AppConfig.MessageQueueServer(
                        c.getConfig("messageQueueServer"),
                        parentPath + "messageQueueServer.",
                        $tsCfgValidator)
                        : new AppConfig.MessageQueueServer(
                        com.typesafe.config.ConfigFactory.parseString("messageQueueServer{}"),
                        parentPath + "messageQueueServer.",
                        $tsCfgValidator);
        $tsCfgValidator.validate();
    }

    public static AppConfig load() {
        Config config = ConfigFactory.parseFile(new File("application.conf")).withFallback(ConfigFactory.load());
        return new AppConfig(config);
    }

    public static class CacheServer {
        public final java.lang.String host;
        public final int port;

        public CacheServer(
                com.typesafe.config.Config c,
                java.lang.String parentPath,
                $TsCfgValidator $tsCfgValidator) {
            this.host = $_reqStr(parentPath, c, "host", $tsCfgValidator);
            this.port = $_reqInt(parentPath, c, "port", $tsCfgValidator);
        }

        private static int $_reqInt(
                java.lang.String parentPath,
                com.typesafe.config.Config c,
                java.lang.String path,
                $TsCfgValidator $tsCfgValidator) {
            if (c == null) return 0;
            try {
                return c.getInt(path);
            } catch (com.typesafe.config.ConfigException e) {
                $tsCfgValidator.addBadPath(parentPath + path, e);
                return 0;
            }
        }

        private static java.lang.String $_reqStr(
                java.lang.String parentPath,
                com.typesafe.config.Config c,
                java.lang.String path,
                $TsCfgValidator $tsCfgValidator) {
            if (c == null) return null;
            try {
                return c.getString(path);
            } catch (com.typesafe.config.ConfigException e) {
                $tsCfgValidator.addBadPath(parentPath + path, e);
                return null;
            }
        }
    }

    public static class ConsoleRssServer {
        public final java.lang.String address;

        public ConsoleRssServer(
                com.typesafe.config.Config c,
                java.lang.String parentPath,
                $TsCfgValidator $tsCfgValidator) {
            this.address = $_reqStr(parentPath, c, "address", $tsCfgValidator);
        }

        private static java.lang.String $_reqStr(
                java.lang.String parentPath,
                com.typesafe.config.Config c,
                java.lang.String path,
                $TsCfgValidator $tsCfgValidator) {
            if (c == null) return null;
            try {
                return c.getString(path);
            } catch (com.typesafe.config.ConfigException e) {
                $tsCfgValidator.addBadPath(parentPath + path, e);
                return null;
            }
        }
    }

    public static class MessageQueueServer {
        public final java.lang.String host;
        public final java.lang.String password;
        public final int port;
        public final java.lang.String username;

        public MessageQueueServer(
                com.typesafe.config.Config c,
                java.lang.String parentPath,
                $TsCfgValidator $tsCfgValidator) {
            this.host = $_reqStr(parentPath, c, "host", $tsCfgValidator);
            this.password = $_reqStr(parentPath, c, "password", $tsCfgValidator);
            this.port = c.hasPathOrNull("port") ? c.getInt("port") : 5672;
            this.username = $_reqStr(parentPath, c, "username", $tsCfgValidator);
        }

        private static java.lang.String $_reqStr(
                java.lang.String parentPath,
                com.typesafe.config.Config c,
                java.lang.String path,
                $TsCfgValidator $tsCfgValidator) {
            if (c == null) return null;
            try {
                return c.getString(path);
            } catch (com.typesafe.config.ConfigException e) {
                $tsCfgValidator.addBadPath(parentPath + path, e);
                return null;
            }
        }
    }

    private static final class $TsCfgValidator {
        private final java.util.List<java.lang.String> badPaths = new java.util.ArrayList<>();

        void addBadPath(java.lang.String path, com.typesafe.config.ConfigException e) {
            badPaths.add("'" + path + "': " + e.getClass().getName() + "(" + e.getMessage() + ")");
        }

        void validate() {
            if (!badPaths.isEmpty()) {
                java.lang.StringBuilder sb = new java.lang.StringBuilder("Invalid configuration:");
                for (java.lang.String path : badPaths) {
                    sb.append("\n    ").append(path);
                }
                throw new com.typesafe.config.ConfigException(sb.toString()) {
                };
            }
        }
    }
}
